
/***************************************************************************
 *  GameState.proto - GameState information
 *
 *  Created: Mon Jan 21 12:05:03 2013
 *  Copyright  2013  Tim Niemueller [www.niemueller.de]
 ****************************************************************************/

/*  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * - Neither the name of the authors nor the names of its contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto2";

package llsf_msgs;

import "Time.proto";
import "MachineInfo.proto";
import "Team.proto";
import "Zone.proto";

option java_package = "org.robocup_logistics.llsf_msgs";
option java_outer_classname = "GameStateProtos";

// initialize the visualisation in the beginning 
message InitVis {
  enum CompType {
    COMP_ID  = 6000;
    MSG_TYPE = 1;
  }
  // Time in seconds since game start
  required Time   sim_time = 1;
  repeated MachineUpdate Machines = 2;
  repeated RobotUpdate Robots = 3;
}

// Updating the elements of the visualisation
message UpdateVis {
  enum CompType {
    COMP_ID  = 6000;
    MSG_TYPE = 2;
  }
  repeated OPCData MachineUpdate = 1;
  repeated RobotData RobotUpdate = 2;
}

message MachineInit {
  enum CompType{
    COMP_ID = 6000;
    MSG_TYPE = 3;
  }
  required OPCData Data = 1;
  optional MachineInfo Machine = 2;
}

message RobotInit {
  enum CompType{
    COMP_ID = 6000;
    MSG_TYPE = 4;
  }
  required RobotData Data = 2;
  optional RobotInfo Robot = 3;
}

message OPCData{
  enum CompType{
    COMP_ID = 6000;
    MSG_TYPE=5;
  }
  required Id = 1;
  required int InActionID = 2;
  required int BasicActionID = 3;
  required int InData0 = 4;
  required int InData1 = 5;
  required int BasicData0 = 6;
  required int BasicData1 = 7;
}

message RobotData{
  enum CompType{
    COMP_ID = 6000;
    MSG_TYPE=6;
  }
  required Id = 1;
  required string ConnectionState = 2;
  required string CurrentTask = 3;
  required string Product = 4;
  required Zone Position = 5;
}


