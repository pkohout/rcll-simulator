// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AgentTask.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LlsfMsgs {

  /// <summary>Holder for reflection information generated from AgentTask.proto</summary>
  public static partial class AgentTaskReflection {

    #region Descriptor
    /// <summary>File descriptor for AgentTask.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AgentTaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9BZ2VudFRhc2sucHJvdG8SCWxsc2ZfbXNncxoKVGVhbS5wcm90byKWBAoJ",
            "QWdlbnRUYXNrEiMKCnRlYW1fY29sb3IYASACKA4yDy5sbHNmX21zZ3MuVGVh",
            "bRIPCgd0YXNrX2lkGAIgAigNEhAKCHJvYm90X2lkGAMgAigNEh8KBG1vdmUY",
            "BSABKAsyDy5sbHNmX21zZ3MuTW92ZUgAEicKCHJldHJpZXZlGAYgASgLMhMu",
            "bGxzZl9tc2dzLlJldHJpZXZlSAASJQoHZGVsaXZlchgHIAEoCzISLmxsc2Zf",
            "bXNncy5EZWxpdmVySAASIwoGYnVmZmVyGAggASgLMhEubGxzZl9tc2dzLkJ1",
            "ZmZlckgAEjYKEGV4cGxvcmVfd2F5cG9pbnQYCSABKAsyGi5sbHNmX21zZ3Mu",
            "RXhwbG9yZVdheXBvaW50SAASEwoLY2FuY2VsX3Rhc2sYCiABKAgSEgoKcGF1",
            "c2VfdGFzaxgLIAEoCBIdChVyZWNlaXZlX21hY2hpbmVfaW5mb3MYDCABKAgS",
            "IAoYcmVwb3J0X2FsbF9zZWVuX21hY2hpbmVzGA0gASgIEhQKDGxvc3RfcHJv",
            "ZHVjdBgOIAEoCBISCgpzdWNjZXNzZnVsGA8gASgIEhAKCGNhbmNlbGVkGBEg",
            "ASgIEhsKE2Vycm9yX2NvZGVfbWlkbGV2ZWwYECABKA0iJwoIQ29tcFR5cGUS",
            "DAoHQ09NUF9JRBDAPhINCghNU0dfVFlQRRD2A0IHCgVUYXNrcyIvCgRNb3Zl",
            "EhAKCHdheXBvaW50GAEgAigJEhUKDW1hY2hpbmVfcG9pbnQYAiABKAkiNQoI",
            "UmV0cmlldmUSEgoKbWFjaGluZV9pZBgBIAIoCRIVCg1tYWNoaW5lX3BvaW50",
            "GAIgAigJIjQKB0RlbGl2ZXISEgoKbWFjaGluZV9pZBgBIAIoCRIVCg1tYWNo",
            "aW5lX3BvaW50GAIgAigJIjIKBkJ1ZmZlchISCgptYWNoaW5lX2lkGAEgAigJ",
            "EhQKDHNoZWxmX251bWJlchgCIAIoDSJOCg9FeHBsb3JlV2F5cG9pbnQSEgoK",
            "bWFjaGluZV9pZBgBIAIoCRIVCg1tYWNoaW5lX3BvaW50GAIgAigJEhAKCHdh",
            "eXBvaW50GAMgAigJQjMKH29yZy5yb2JvY3VwX2xvZ2lzdGljcy5sbHNmX21z",
            "Z3NCEEFnZW50VGFza3NQcm90b3M="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::LlsfMsgs.TeamReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.AgentTask), global::LlsfMsgs.AgentTask.Parser, new[]{ "TeamColor", "TaskId", "RobotId", "Move", "Retrieve", "Deliver", "Buffer", "ExploreWaypoint", "CancelTask", "PauseTask", "ReceiveMachineInfos", "ReportAllSeenMachines", "LostProduct", "Successful", "Canceled", "ErrorCodeMidlevel" }, new[]{ "Tasks" }, new[]{ typeof(global::LlsfMsgs.AgentTask.Types.CompType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.Move), global::LlsfMsgs.Move.Parser, new[]{ "Waypoint", "MachinePoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.Retrieve), global::LlsfMsgs.Retrieve.Parser, new[]{ "MachineId", "MachinePoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.Deliver), global::LlsfMsgs.Deliver.Parser, new[]{ "MachineId", "MachinePoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.Buffer), global::LlsfMsgs.Buffer.Parser, new[]{ "MachineId", "ShelfNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.ExploreWaypoint), global::LlsfMsgs.ExploreWaypoint.Parser, new[]{ "MachineId", "MachinePoint", "Waypoint" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AgentTask : pb::IMessage<AgentTask> {
    private static readonly pb::MessageParser<AgentTask> _parser = new pb::MessageParser<AgentTask>(() => new AgentTask());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AgentTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.AgentTaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgentTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgentTask(AgentTask other) : this() {
      _hasBits0 = other._hasBits0;
      teamColor_ = other.teamColor_;
      taskId_ = other.taskId_;
      robotId_ = other.robotId_;
      cancelTask_ = other.cancelTask_;
      pauseTask_ = other.pauseTask_;
      receiveMachineInfos_ = other.receiveMachineInfos_;
      reportAllSeenMachines_ = other.reportAllSeenMachines_;
      lostProduct_ = other.lostProduct_;
      successful_ = other.successful_;
      canceled_ = other.canceled_;
      errorCodeMidlevel_ = other.errorCodeMidlevel_;
      switch (other.TasksCase) {
        case TasksOneofCase.Move:
          Move = other.Move.Clone();
          break;
        case TasksOneofCase.Retrieve:
          Retrieve = other.Retrieve.Clone();
          break;
        case TasksOneofCase.Deliver:
          Deliver = other.Deliver.Clone();
          break;
        case TasksOneofCase.Buffer:
          Buffer = other.Buffer.Clone();
          break;
        case TasksOneofCase.ExploreWaypoint:
          ExploreWaypoint = other.ExploreWaypoint.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgentTask Clone() {
      return new AgentTask(this);
    }

    /// <summary>Field number for the "team_color" field.</summary>
    public const int TeamColorFieldNumber = 1;
    private readonly static global::LlsfMsgs.Team TeamColorDefaultValue = global::LlsfMsgs.Team.Cyan;

    private global::LlsfMsgs.Team teamColor_;
    /// <summary>
    /// general infos
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.Team TeamColor {
      get { if ((_hasBits0 & 1) != 0) { return teamColor_; } else { return TeamColorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        teamColor_ = value;
      }
    }
    /// <summary>Gets whether the "team_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamColor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "team_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamColor() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private readonly static uint TaskIdDefaultValue = 0;

    private uint taskId_;
    /// <summary>
    /// identifier for the tasks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { if ((_hasBits0 & 2) != 0) { return taskId_; } else { return TaskIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        taskId_ = value;
      }
    }
    /// <summary>Gets whether the "task_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaskId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "task_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaskId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "robot_id" field.</summary>
    public const int RobotIdFieldNumber = 3;
    private readonly static uint RobotIdDefaultValue = 0;

    private uint robotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RobotId {
      get { if ((_hasBits0 & 4) != 0) { return robotId_; } else { return RobotIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        robotId_ = value;
      }
    }
    /// <summary>Gets whether the "robot_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRobotId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "robot_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRobotId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.Move Move {
      get { return tasksCase_ == TasksOneofCase.Move ? (global::LlsfMsgs.Move) tasks_ : null; }
      set {
        tasks_ = value;
        tasksCase_ = value == null ? TasksOneofCase.None : TasksOneofCase.Move;
      }
    }

    /// <summary>Field number for the "retrieve" field.</summary>
    public const int RetrieveFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.Retrieve Retrieve {
      get { return tasksCase_ == TasksOneofCase.Retrieve ? (global::LlsfMsgs.Retrieve) tasks_ : null; }
      set {
        tasks_ = value;
        tasksCase_ = value == null ? TasksOneofCase.None : TasksOneofCase.Retrieve;
      }
    }

    /// <summary>Field number for the "deliver" field.</summary>
    public const int DeliverFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.Deliver Deliver {
      get { return tasksCase_ == TasksOneofCase.Deliver ? (global::LlsfMsgs.Deliver) tasks_ : null; }
      set {
        tasks_ = value;
        tasksCase_ = value == null ? TasksOneofCase.None : TasksOneofCase.Deliver;
      }
    }

    /// <summary>Field number for the "buffer" field.</summary>
    public const int BufferFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.Buffer Buffer {
      get { return tasksCase_ == TasksOneofCase.Buffer ? (global::LlsfMsgs.Buffer) tasks_ : null; }
      set {
        tasks_ = value;
        tasksCase_ = value == null ? TasksOneofCase.None : TasksOneofCase.Buffer;
      }
    }

    /// <summary>Field number for the "explore_waypoint" field.</summary>
    public const int ExploreWaypointFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.ExploreWaypoint ExploreWaypoint {
      get { return tasksCase_ == TasksOneofCase.ExploreWaypoint ? (global::LlsfMsgs.ExploreWaypoint) tasks_ : null; }
      set {
        tasks_ = value;
        tasksCase_ = value == null ? TasksOneofCase.None : TasksOneofCase.ExploreWaypoint;
      }
    }

    /// <summary>Field number for the "cancel_task" field.</summary>
    public const int CancelTaskFieldNumber = 10;
    private readonly static bool CancelTaskDefaultValue = false;

    private bool cancelTask_;
    /// <summary>
    /// flags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CancelTask {
      get { if ((_hasBits0 & 8) != 0) { return cancelTask_; } else { return CancelTaskDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cancelTask_ = value;
      }
    }
    /// <summary>Gets whether the "cancel_task" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCancelTask {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cancel_task" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCancelTask() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pause_task" field.</summary>
    public const int PauseTaskFieldNumber = 11;
    private readonly static bool PauseTaskDefaultValue = false;

    private bool pauseTask_;
    /// <summary>
    /// if true current task is paused, if false again task is continued
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PauseTask {
      get { if ((_hasBits0 & 16) != 0) { return pauseTask_; } else { return PauseTaskDefaultValue; } }
      set {
        _hasBits0 |= 16;
        pauseTask_ = value;
      }
    }
    /// <summary>Gets whether the "pause_task" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPauseTask {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "pause_task" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPauseTask() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "receive_machine_infos" field.</summary>
    public const int ReceiveMachineInfosFieldNumber = 12;
    private readonly static bool ReceiveMachineInfosDefaultValue = false;

    private bool receiveMachineInfos_;
    /// <summary>
    /// true if robot requires machine-informations (can be set by robot and teamserver)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceiveMachineInfos {
      get { if ((_hasBits0 & 32) != 0) { return receiveMachineInfos_; } else { return ReceiveMachineInfosDefaultValue; } }
      set {
        _hasBits0 |= 32;
        receiveMachineInfos_ = value;
      }
    }
    /// <summary>Gets whether the "receive_machine_infos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReceiveMachineInfos {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "receive_machine_infos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReceiveMachineInfos() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "report_all_seen_machines" field.</summary>
    public const int ReportAllSeenMachinesFieldNumber = 13;
    private readonly static bool ReportAllSeenMachinesDefaultValue = false;

    private bool reportAllSeenMachines_;
    /// <summary>
    /// flag need for the exploration logic
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReportAllSeenMachines {
      get { if ((_hasBits0 & 64) != 0) { return reportAllSeenMachines_; } else { return ReportAllSeenMachinesDefaultValue; } }
      set {
        _hasBits0 |= 64;
        reportAllSeenMachines_ = value;
      }
    }
    /// <summary>Gets whether the "report_all_seen_machines" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReportAllSeenMachines {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "report_all_seen_machines" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReportAllSeenMachines() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "lost_product" field.</summary>
    public const int LostProductFieldNumber = 14;
    private readonly static bool LostProductDefaultValue = false;

    private bool lostProduct_;
    /// <summary>
    /// true if the product was lost
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LostProduct {
      get { if ((_hasBits0 & 128) != 0) { return lostProduct_; } else { return LostProductDefaultValue; } }
      set {
        _hasBits0 |= 128;
        lostProduct_ = value;
      }
    }
    /// <summary>Gets whether the "lost_product" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLostProduct {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "lost_product" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLostProduct() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "successful" field.</summary>
    public const int SuccessfulFieldNumber = 15;
    private readonly static bool SuccessfulDefaultValue = false;

    private bool successful_;
    /// <summary>
    /// result of the execution from the robot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Successful {
      get { if ((_hasBits0 & 256) != 0) { return successful_; } else { return SuccessfulDefaultValue; } }
      set {
        _hasBits0 |= 256;
        successful_ = value;
      }
    }
    /// <summary>Gets whether the "successful" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuccessful {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "successful" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuccessful() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "canceled" field.</summary>
    public const int CanceledFieldNumber = 17;
    private readonly static bool CanceledDefaultValue = false;

    private bool canceled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Canceled {
      get { if ((_hasBits0 & 1024) != 0) { return canceled_; } else { return CanceledDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        canceled_ = value;
      }
    }
    /// <summary>Gets whether the "canceled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCanceled {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "canceled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCanceled() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "error_code_midlevel" field.</summary>
    public const int ErrorCodeMidlevelFieldNumber = 16;
    private readonly static uint ErrorCodeMidlevelDefaultValue = 0;

    private uint errorCodeMidlevel_;
    /// <summary>
    /// only set if failure, error-codes defined in GripsCommon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorCodeMidlevel {
      get { if ((_hasBits0 & 512) != 0) { return errorCodeMidlevel_; } else { return ErrorCodeMidlevelDefaultValue; } }
      set {
        _hasBits0 |= 512;
        errorCodeMidlevel_ = value;
      }
    }
    /// <summary>Gets whether the "error_code_midlevel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCodeMidlevel {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "error_code_midlevel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCodeMidlevel() {
      _hasBits0 &= ~512;
    }

    private object tasks_;
    /// <summary>Enum of possible cases for the "Tasks" oneof.</summary>
    public enum TasksOneofCase {
      None = 0,
      Move = 5,
      Retrieve = 6,
      Deliver = 7,
      Buffer = 8,
      ExploreWaypoint = 9,
    }
    private TasksOneofCase tasksCase_ = TasksOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TasksOneofCase TasksCase {
      get { return tasksCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTasks() {
      tasksCase_ = TasksOneofCase.None;
      tasks_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AgentTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AgentTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamColor != other.TeamColor) return false;
      if (TaskId != other.TaskId) return false;
      if (RobotId != other.RobotId) return false;
      if (!object.Equals(Move, other.Move)) return false;
      if (!object.Equals(Retrieve, other.Retrieve)) return false;
      if (!object.Equals(Deliver, other.Deliver)) return false;
      if (!object.Equals(Buffer, other.Buffer)) return false;
      if (!object.Equals(ExploreWaypoint, other.ExploreWaypoint)) return false;
      if (CancelTask != other.CancelTask) return false;
      if (PauseTask != other.PauseTask) return false;
      if (ReceiveMachineInfos != other.ReceiveMachineInfos) return false;
      if (ReportAllSeenMachines != other.ReportAllSeenMachines) return false;
      if (LostProduct != other.LostProduct) return false;
      if (Successful != other.Successful) return false;
      if (Canceled != other.Canceled) return false;
      if (ErrorCodeMidlevel != other.ErrorCodeMidlevel) return false;
      if (TasksCase != other.TasksCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTeamColor) hash ^= TeamColor.GetHashCode();
      if (HasTaskId) hash ^= TaskId.GetHashCode();
      if (HasRobotId) hash ^= RobotId.GetHashCode();
      if (tasksCase_ == TasksOneofCase.Move) hash ^= Move.GetHashCode();
      if (tasksCase_ == TasksOneofCase.Retrieve) hash ^= Retrieve.GetHashCode();
      if (tasksCase_ == TasksOneofCase.Deliver) hash ^= Deliver.GetHashCode();
      if (tasksCase_ == TasksOneofCase.Buffer) hash ^= Buffer.GetHashCode();
      if (tasksCase_ == TasksOneofCase.ExploreWaypoint) hash ^= ExploreWaypoint.GetHashCode();
      if (HasCancelTask) hash ^= CancelTask.GetHashCode();
      if (HasPauseTask) hash ^= PauseTask.GetHashCode();
      if (HasReceiveMachineInfos) hash ^= ReceiveMachineInfos.GetHashCode();
      if (HasReportAllSeenMachines) hash ^= ReportAllSeenMachines.GetHashCode();
      if (HasLostProduct) hash ^= LostProduct.GetHashCode();
      if (HasSuccessful) hash ^= Successful.GetHashCode();
      if (HasCanceled) hash ^= Canceled.GetHashCode();
      if (HasErrorCodeMidlevel) hash ^= ErrorCodeMidlevel.GetHashCode();
      hash ^= (int) tasksCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTeamColor) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TeamColor);
      }
      if (HasTaskId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if (HasRobotId) {
        output.WriteRawTag(24);
        output.WriteUInt32(RobotId);
      }
      if (tasksCase_ == TasksOneofCase.Move) {
        output.WriteRawTag(42);
        output.WriteMessage(Move);
      }
      if (tasksCase_ == TasksOneofCase.Retrieve) {
        output.WriteRawTag(50);
        output.WriteMessage(Retrieve);
      }
      if (tasksCase_ == TasksOneofCase.Deliver) {
        output.WriteRawTag(58);
        output.WriteMessage(Deliver);
      }
      if (tasksCase_ == TasksOneofCase.Buffer) {
        output.WriteRawTag(66);
        output.WriteMessage(Buffer);
      }
      if (tasksCase_ == TasksOneofCase.ExploreWaypoint) {
        output.WriteRawTag(74);
        output.WriteMessage(ExploreWaypoint);
      }
      if (HasCancelTask) {
        output.WriteRawTag(80);
        output.WriteBool(CancelTask);
      }
      if (HasPauseTask) {
        output.WriteRawTag(88);
        output.WriteBool(PauseTask);
      }
      if (HasReceiveMachineInfos) {
        output.WriteRawTag(96);
        output.WriteBool(ReceiveMachineInfos);
      }
      if (HasReportAllSeenMachines) {
        output.WriteRawTag(104);
        output.WriteBool(ReportAllSeenMachines);
      }
      if (HasLostProduct) {
        output.WriteRawTag(112);
        output.WriteBool(LostProduct);
      }
      if (HasSuccessful) {
        output.WriteRawTag(120);
        output.WriteBool(Successful);
      }
      if (HasErrorCodeMidlevel) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(ErrorCodeMidlevel);
      }
      if (HasCanceled) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Canceled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTeamColor) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TeamColor);
      }
      if (HasTaskId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (HasRobotId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RobotId);
      }
      if (tasksCase_ == TasksOneofCase.Move) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Move);
      }
      if (tasksCase_ == TasksOneofCase.Retrieve) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Retrieve);
      }
      if (tasksCase_ == TasksOneofCase.Deliver) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deliver);
      }
      if (tasksCase_ == TasksOneofCase.Buffer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buffer);
      }
      if (tasksCase_ == TasksOneofCase.ExploreWaypoint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExploreWaypoint);
      }
      if (HasCancelTask) {
        size += 1 + 1;
      }
      if (HasPauseTask) {
        size += 1 + 1;
      }
      if (HasReceiveMachineInfos) {
        size += 1 + 1;
      }
      if (HasReportAllSeenMachines) {
        size += 1 + 1;
      }
      if (HasLostProduct) {
        size += 1 + 1;
      }
      if (HasSuccessful) {
        size += 1 + 1;
      }
      if (HasCanceled) {
        size += 2 + 1;
      }
      if (HasErrorCodeMidlevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCodeMidlevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AgentTask other) {
      if (other == null) {
        return;
      }
      if (other.HasTeamColor) {
        TeamColor = other.TeamColor;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      if (other.HasRobotId) {
        RobotId = other.RobotId;
      }
      if (other.HasCancelTask) {
        CancelTask = other.CancelTask;
      }
      if (other.HasPauseTask) {
        PauseTask = other.PauseTask;
      }
      if (other.HasReceiveMachineInfos) {
        ReceiveMachineInfos = other.ReceiveMachineInfos;
      }
      if (other.HasReportAllSeenMachines) {
        ReportAllSeenMachines = other.ReportAllSeenMachines;
      }
      if (other.HasLostProduct) {
        LostProduct = other.LostProduct;
      }
      if (other.HasSuccessful) {
        Successful = other.Successful;
      }
      if (other.HasCanceled) {
        Canceled = other.Canceled;
      }
      if (other.HasErrorCodeMidlevel) {
        ErrorCodeMidlevel = other.ErrorCodeMidlevel;
      }
      switch (other.TasksCase) {
        case TasksOneofCase.Move:
          if (Move == null) {
            Move = new global::LlsfMsgs.Move();
          }
          Move.MergeFrom(other.Move);
          break;
        case TasksOneofCase.Retrieve:
          if (Retrieve == null) {
            Retrieve = new global::LlsfMsgs.Retrieve();
          }
          Retrieve.MergeFrom(other.Retrieve);
          break;
        case TasksOneofCase.Deliver:
          if (Deliver == null) {
            Deliver = new global::LlsfMsgs.Deliver();
          }
          Deliver.MergeFrom(other.Deliver);
          break;
        case TasksOneofCase.Buffer:
          if (Buffer == null) {
            Buffer = new global::LlsfMsgs.Buffer();
          }
          Buffer.MergeFrom(other.Buffer);
          break;
        case TasksOneofCase.ExploreWaypoint:
          if (ExploreWaypoint == null) {
            ExploreWaypoint = new global::LlsfMsgs.ExploreWaypoint();
          }
          ExploreWaypoint.MergeFrom(other.ExploreWaypoint);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            RobotId = input.ReadUInt32();
            break;
          }
          case 42: {
            global::LlsfMsgs.Move subBuilder = new global::LlsfMsgs.Move();
            if (tasksCase_ == TasksOneofCase.Move) {
              subBuilder.MergeFrom(Move);
            }
            input.ReadMessage(subBuilder);
            Move = subBuilder;
            break;
          }
          case 50: {
            global::LlsfMsgs.Retrieve subBuilder = new global::LlsfMsgs.Retrieve();
            if (tasksCase_ == TasksOneofCase.Retrieve) {
              subBuilder.MergeFrom(Retrieve);
            }
            input.ReadMessage(subBuilder);
            Retrieve = subBuilder;
            break;
          }
          case 58: {
            global::LlsfMsgs.Deliver subBuilder = new global::LlsfMsgs.Deliver();
            if (tasksCase_ == TasksOneofCase.Deliver) {
              subBuilder.MergeFrom(Deliver);
            }
            input.ReadMessage(subBuilder);
            Deliver = subBuilder;
            break;
          }
          case 66: {
            global::LlsfMsgs.Buffer subBuilder = new global::LlsfMsgs.Buffer();
            if (tasksCase_ == TasksOneofCase.Buffer) {
              subBuilder.MergeFrom(Buffer);
            }
            input.ReadMessage(subBuilder);
            Buffer = subBuilder;
            break;
          }
          case 74: {
            global::LlsfMsgs.ExploreWaypoint subBuilder = new global::LlsfMsgs.ExploreWaypoint();
            if (tasksCase_ == TasksOneofCase.ExploreWaypoint) {
              subBuilder.MergeFrom(ExploreWaypoint);
            }
            input.ReadMessage(subBuilder);
            ExploreWaypoint = subBuilder;
            break;
          }
          case 80: {
            CancelTask = input.ReadBool();
            break;
          }
          case 88: {
            PauseTask = input.ReadBool();
            break;
          }
          case 96: {
            ReceiveMachineInfos = input.ReadBool();
            break;
          }
          case 104: {
            ReportAllSeenMachines = input.ReadBool();
            break;
          }
          case 112: {
            LostProduct = input.ReadBool();
            break;
          }
          case 120: {
            Successful = input.ReadBool();
            break;
          }
          case 128: {
            ErrorCodeMidlevel = input.ReadUInt32();
            break;
          }
          case 136: {
            Canceled = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AgentTask message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        /// <summary>
        /// COMPONENT 8000 is Simulation
        /// </summary>
        [pbr::OriginalName("COMP_ID")] CompId = 8000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 502,
      }

    }
    #endregion

  }

  /// <summary>
  /// Move robot to stated waypoint
  /// </summary>
  public sealed partial class Move : pb::IMessage<Move> {
    private static readonly pb::MessageParser<Move> _parser = new pb::MessageParser<Move>(() => new Move());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Move> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.AgentTaskReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move(Move other) : this() {
      waypoint_ = other.waypoint_;
      machinePoint_ = other.machinePoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move Clone() {
      return new Move(this);
    }

    /// <summary>Field number for the "waypoint" field.</summary>
    public const int WaypointFieldNumber = 1;
    private readonly static string WaypointDefaultValue = "";

    private string waypoint_;
    /// <summary>
    /// can be a zone or a machine (default is input side of a machine)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Waypoint {
      get { return waypoint_ ?? WaypointDefaultValue; }
      set {
        waypoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "waypoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWaypoint {
      get { return waypoint_ != null; }
    }
    /// <summary>Clears the value of the "waypoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWaypoint() {
      waypoint_ = null;
    }

    /// <summary>Field number for the "machine_point" field.</summary>
    public const int MachinePointFieldNumber = 2;
    private readonly static string MachinePointDefaultValue = "";

    private string machinePoint_;
    /// <summary>
    /// can be used to specify the point of the machine (input, output)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachinePoint {
      get { return machinePoint_ ?? MachinePointDefaultValue; }
      set {
        machinePoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachinePoint {
      get { return machinePoint_ != null; }
    }
    /// <summary>Clears the value of the "machine_point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachinePoint() {
      machinePoint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Move);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Move other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Waypoint != other.Waypoint) return false;
      if (MachinePoint != other.MachinePoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWaypoint) hash ^= Waypoint.GetHashCode();
      if (HasMachinePoint) hash ^= MachinePoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasWaypoint) {
        output.WriteRawTag(10);
        output.WriteString(Waypoint);
      }
      if (HasMachinePoint) {
        output.WriteRawTag(18);
        output.WriteString(MachinePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasWaypoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Waypoint);
      }
      if (HasMachinePoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachinePoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Move other) {
      if (other == null) {
        return;
      }
      if (other.HasWaypoint) {
        Waypoint = other.Waypoint;
      }
      if (other.HasMachinePoint) {
        MachinePoint = other.MachinePoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Waypoint = input.ReadString();
            break;
          }
          case 18: {
            MachinePoint = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Get a workpiece at the given station and hold the product in the gripper
  /// </summary>
  public sealed partial class Retrieve : pb::IMessage<Retrieve> {
    private static readonly pb::MessageParser<Retrieve> _parser = new pb::MessageParser<Retrieve>(() => new Retrieve());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Retrieve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.AgentTaskReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Retrieve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Retrieve(Retrieve other) : this() {
      machineId_ = other.machineId_;
      machinePoint_ = other.machinePoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Retrieve Clone() {
      return new Retrieve(this);
    }

    /// <summary>Field number for the "machine_id" field.</summary>
    public const int MachineIdFieldNumber = 1;
    private readonly static string MachineIdDefaultValue = "";

    private string machineId_;
    /// <summary>
    /// name of the machine 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineId {
      get { return machineId_ ?? MachineIdDefaultValue; }
      set {
        machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachineId {
      get { return machineId_ != null; }
    }
    /// <summary>Clears the value of the "machine_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachineId() {
      machineId_ = null;
    }

    /// <summary>Field number for the "machine_point" field.</summary>
    public const int MachinePointFieldNumber = 2;
    private readonly static string MachinePointDefaultValue = "";

    private string machinePoint_;
    /// <summary>
    /// valid machine-points: input, output
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachinePoint {
      get { return machinePoint_ ?? MachinePointDefaultValue; }
      set {
        machinePoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachinePoint {
      get { return machinePoint_ != null; }
    }
    /// <summary>Clears the value of the "machine_point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachinePoint() {
      machinePoint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Retrieve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Retrieve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MachineId != other.MachineId) return false;
      if (MachinePoint != other.MachinePoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMachineId) hash ^= MachineId.GetHashCode();
      if (HasMachinePoint) hash ^= MachinePoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasMachinePoint) {
        output.WriteRawTag(18);
        output.WriteString(MachinePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMachineId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
      }
      if (HasMachinePoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachinePoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Retrieve other) {
      if (other == null) {
        return;
      }
      if (other.HasMachineId) {
        MachineId = other.MachineId;
      }
      if (other.HasMachinePoint) {
        MachinePoint = other.MachinePoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 18: {
            MachinePoint = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Deliver the holding product to the given station
  /// </summary>
  public sealed partial class Deliver : pb::IMessage<Deliver> {
    private static readonly pb::MessageParser<Deliver> _parser = new pb::MessageParser<Deliver>(() => new Deliver());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Deliver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.AgentTaskReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deliver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deliver(Deliver other) : this() {
      machineId_ = other.machineId_;
      machinePoint_ = other.machinePoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deliver Clone() {
      return new Deliver(this);
    }

    /// <summary>Field number for the "machine_id" field.</summary>
    public const int MachineIdFieldNumber = 1;
    private readonly static string MachineIdDefaultValue = "";

    private string machineId_;
    /// <summary>
    /// name of the machine 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineId {
      get { return machineId_ ?? MachineIdDefaultValue; }
      set {
        machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachineId {
      get { return machineId_ != null; }
    }
    /// <summary>Clears the value of the "machine_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachineId() {
      machineId_ = null;
    }

    /// <summary>Field number for the "machine_point" field.</summary>
    public const int MachinePointFieldNumber = 2;
    private readonly static string MachinePointDefaultValue = "";

    private string machinePoint_;
    /// <summary>
    /// valid machine-points: input, slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachinePoint {
      get { return machinePoint_ ?? MachinePointDefaultValue; }
      set {
        machinePoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachinePoint {
      get { return machinePoint_ != null; }
    }
    /// <summary>Clears the value of the "machine_point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachinePoint() {
      machinePoint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Deliver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Deliver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MachineId != other.MachineId) return false;
      if (MachinePoint != other.MachinePoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMachineId) hash ^= MachineId.GetHashCode();
      if (HasMachinePoint) hash ^= MachinePoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasMachinePoint) {
        output.WriteRawTag(18);
        output.WriteString(MachinePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMachineId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
      }
      if (HasMachinePoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachinePoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Deliver other) {
      if (other == null) {
        return;
      }
      if (other.HasMachineId) {
        MachineId = other.MachineId;
      }
      if (other.HasMachinePoint) {
        MachinePoint = other.MachinePoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 18: {
            MachinePoint = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Get product from shelf and place it immediately afterwards on the conveyor
  /// </summary>
  public sealed partial class Buffer : pb::IMessage<Buffer> {
    private static readonly pb::MessageParser<Buffer> _parser = new pb::MessageParser<Buffer>(() => new Buffer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Buffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.AgentTaskReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buffer(Buffer other) : this() {
      _hasBits0 = other._hasBits0;
      machineId_ = other.machineId_;
      shelfNumber_ = other.shelfNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buffer Clone() {
      return new Buffer(this);
    }

    /// <summary>Field number for the "machine_id" field.</summary>
    public const int MachineIdFieldNumber = 1;
    private readonly static string MachineIdDefaultValue = "";

    private string machineId_;
    /// <summary>
    /// machine-id because need to know if CS1 or CS2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineId {
      get { return machineId_ ?? MachineIdDefaultValue; }
      set {
        machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachineId {
      get { return machineId_ != null; }
    }
    /// <summary>Clears the value of the "machine_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachineId() {
      machineId_ = null;
    }

    /// <summary>Field number for the "shelf_number" field.</summary>
    public const int ShelfNumberFieldNumber = 2;
    private readonly static uint ShelfNumberDefaultValue = 0;

    private uint shelfNumber_;
    /// <summary>
    /// only for old-gripper, valid shelf-numbers: 1, 2, 3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShelfNumber {
      get { if ((_hasBits0 & 1) != 0) { return shelfNumber_; } else { return ShelfNumberDefaultValue; } }
      set {
        _hasBits0 |= 1;
        shelfNumber_ = value;
      }
    }
    /// <summary>Gets whether the "shelf_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShelfNumber {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "shelf_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShelfNumber() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Buffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Buffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MachineId != other.MachineId) return false;
      if (ShelfNumber != other.ShelfNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMachineId) hash ^= MachineId.GetHashCode();
      if (HasShelfNumber) hash ^= ShelfNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasShelfNumber) {
        output.WriteRawTag(16);
        output.WriteUInt32(ShelfNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMachineId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
      }
      if (HasShelfNumber) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShelfNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Buffer other) {
      if (other == null) {
        return;
      }
      if (other.HasMachineId) {
        MachineId = other.MachineId;
      }
      if (other.HasShelfNumber) {
        ShelfNumber = other.ShelfNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 16: {
            ShelfNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Move to the given machine (if position already detected), else move to given waypoint (=zone on the playing field)
  /// </summary>
  public sealed partial class ExploreWaypoint : pb::IMessage<ExploreWaypoint> {
    private static readonly pb::MessageParser<ExploreWaypoint> _parser = new pb::MessageParser<ExploreWaypoint>(() => new ExploreWaypoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExploreWaypoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.AgentTaskReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreWaypoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreWaypoint(ExploreWaypoint other) : this() {
      machineId_ = other.machineId_;
      machinePoint_ = other.machinePoint_;
      waypoint_ = other.waypoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreWaypoint Clone() {
      return new ExploreWaypoint(this);
    }

    /// <summary>Field number for the "machine_id" field.</summary>
    public const int MachineIdFieldNumber = 1;
    private readonly static string MachineIdDefaultValue = "";

    private string machineId_;
    /// <summary>
    /// name of the machine 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineId {
      get { return machineId_ ?? MachineIdDefaultValue; }
      set {
        machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachineId {
      get { return machineId_ != null; }
    }
    /// <summary>Clears the value of the "machine_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachineId() {
      machineId_ = null;
    }

    /// <summary>Field number for the "machine_point" field.</summary>
    public const int MachinePointFieldNumber = 2;
    private readonly static string MachinePointDefaultValue = "";

    private string machinePoint_;
    /// <summary>
    /// valid machine-points: input, output
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachinePoint {
      get { return machinePoint_ ?? MachinePointDefaultValue; }
      set {
        machinePoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachinePoint {
      get { return machinePoint_ != null; }
    }
    /// <summary>Clears the value of the "machine_point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachinePoint() {
      machinePoint_ = null;
    }

    /// <summary>Field number for the "waypoint" field.</summary>
    public const int WaypointFieldNumber = 3;
    private readonly static string WaypointDefaultValue = "";

    private string waypoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Waypoint {
      get { return waypoint_ ?? WaypointDefaultValue; }
      set {
        waypoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "waypoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWaypoint {
      get { return waypoint_ != null; }
    }
    /// <summary>Clears the value of the "waypoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWaypoint() {
      waypoint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExploreWaypoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExploreWaypoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MachineId != other.MachineId) return false;
      if (MachinePoint != other.MachinePoint) return false;
      if (Waypoint != other.Waypoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMachineId) hash ^= MachineId.GetHashCode();
      if (HasMachinePoint) hash ^= MachinePoint.GetHashCode();
      if (HasWaypoint) hash ^= Waypoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasMachinePoint) {
        output.WriteRawTag(18);
        output.WriteString(MachinePoint);
      }
      if (HasWaypoint) {
        output.WriteRawTag(26);
        output.WriteString(Waypoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMachineId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
      }
      if (HasMachinePoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachinePoint);
      }
      if (HasWaypoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Waypoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExploreWaypoint other) {
      if (other == null) {
        return;
      }
      if (other.HasMachineId) {
        MachineId = other.MachineId;
      }
      if (other.HasMachinePoint) {
        MachinePoint = other.MachinePoint;
      }
      if (other.HasWaypoint) {
        Waypoint = other.Waypoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 18: {
            MachinePoint = input.ReadString();
            break;
          }
          case 26: {
            Waypoint = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
